@model MrCMS.Web.Apps.Ecommerce.Pages.Product
<div class="row-fluid">
    @if (MrCMS.Website.MrCMSApplication.Get<MrCMS.Web.Apps.Ecommerce.Settings.TaxSettings>().LoadedPricesIncludeTax)
    {
        <div class="span2">
            @Html.LabelFor(product => product.TaxRate.Id, "Tax Rate")
            @Html.DropDownListFor(product => product.TaxRate.Id, ViewData["tax-rate-options"] as IEnumerable<SelectListItem>, new { @class = "span12" })
        </div>
    }
</div>
<table class="table table-condensed table-striped">
    <thead>
        <tr>
             @if (Model.Variants.Any(x => !string.IsNullOrEmpty(x.Name)))
             {
                 <th>Name
                 </th>
             }
            @foreach (var option in Model.AttributeOptions.OrderBy(x => x.DisplayOrder))
            {
                <th>@option.Name
                </th>
            }
            <th>SKU
            </th>
            <th>Price
            </th>
            <th>Stock Remaining
            </th>
            <th>Actions
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var variant in Model.Variants)
        {
            <tr>
                <td>
                    @if (!String.IsNullOrWhiteSpace(variant.Name))
                    {
                        <span>@variant.Name</span>
                    }
                    else
                    {
                        <span>@Model.Name</span>
                    }
                </td>
                @foreach (var option in Model.AttributeOptions.OrderBy(x => x.DisplayOrder))
                {
                    var productAttributeValue = variant.AttributeValues.FirstOrDefault(value => value.ProductAttributeOption.Name == option.Name);
                    <td>
                        @(productAttributeValue != null ? productAttributeValue.Value : string.Empty)
                    </td>
                }
                <td>
                    @variant.SKU
                </td>
                <td>
                    @variant.BasePrice.ToString("#.##") @Html.ActionLink("Add price break", "Add", "PriceBreak", new { id = variant.Id, type = "ProductVariant" }, new { @class = "btn btn-mini", data_toggle = "fb-modal" })
                    @if (variant.PriceBreaks.Any())
                    {
                        <h5>Price Breaks</h5>
                        <table class="table table-striped table-condensed">
                            <tr>
                                <td>Qty</td>
                                <td>Price</td>
                                <td></td>
                            </tr>
                            @foreach (var priceBreak in variant.PriceBreaks.OrderBy(@break => @break.Quantity))
                            {
                                <tr>
                                    <td>@priceBreak.Quantity</td>
                                    <td>@priceBreak.Price.ToString("#.##")</td>
                                    <td>@Html.ActionLink("Delete", "Delete", "PriceBreak", new { id = priceBreak.Id }, new { @class = "btn btn-danger btn-mini pull-right", data_toggle = "fb-modal" })</td>
                                </tr>
                            }

                        </table>
    
                    }
                </td>
                <td>
                    @variant.StockRemaining
                </td>
                <td>
                    <div class="btn-group">
                        @Html.ActionLink("Edit", "Edit", "ProductVariant", new { id = variant.Id }, new { @class = "btn btn-mini", data_toggle = "fb-modal" })
                        @if (Model.Variants.Count > 1)
                        {
                            @Html.ActionLink("Delete", "Delete", "ProductVariant", new { id = variant.Id }, new { @class = "btn btn-mini btn-danger", data_toggle = "fb-modal" })
                        }
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>
