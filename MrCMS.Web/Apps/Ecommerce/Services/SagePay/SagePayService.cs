using System.Collections.Generic;
using System.Web.Routing;
using MrCMS.Web.Apps.Ecommerce.Models;
using MrCMS.Web.Apps.Ecommerce.Payment.SagePay;
using MrCMS.Web.Apps.Ecommerce.Services.Cart;

namespace MrCMS.Web.Apps.Ecommerce.Services.SagePay
{
    public class SagePayService : ISagePayService, ICartSessionKeyList
    {
        private readonly RequestContext _requestContext;
        private readonly ITransactionRegistrar _transactionRegistrar;
        private readonly ISagePayItemCreator _sagePayItemCreator;
        private readonly ICartSessionManager _cartSessionManager;
        private const string SagePayEnrolledResponseKey = "current.sagepayenrolledguid";

        public SagePayService(RequestContext requestContext, ITransactionRegistrar transactionRegistrar, ISagePayItemCreator sagePayItemCreator,ICartSessionManager cartSessionManager)
        {
            _requestContext = requestContext;
            _transactionRegistrar = transactionRegistrar;
            _sagePayItemCreator = sagePayItemCreator;
            _cartSessionManager = cartSessionManager;
        }

        public TransactionRegistrationResponse RegisterTransaction(CartModel model)
        {
            var response = _cartSessionManager.GetSessionValue<TransactionRegistrationResponse>(SagePayEnrolledResponseKey);
            if (response != null)
                return response;
            var transactionRegistrationResponse = _transactionRegistrar.Send( model.CartGuid.ToString(),
                                                                             _sagePayItemCreator.GetShoppingBasket(model),
                                                                             _sagePayItemCreator.GetAddress(
                                                                                 model.BillingAddress),
                                                                             _sagePayItemCreator.GetAddress(
                                                                                 model.ShippingAddress),
                                                                             model.OrderEmail, PaymentFormProfile.Low);
            if (transactionRegistrationResponse.Status == ResponseType.Ok)
                _cartSessionManager.SetSessionValue(SagePayEnrolledResponseKey, transactionRegistrationResponse);

            return transactionRegistrationResponse;
        }

        public string GetSecurityKey()
        {
            var response = _cartSessionManager.GetSessionValue<TransactionRegistrationResponse>(SagePayEnrolledResponseKey);
            return response != null ? response.SecurityKey : null;
        }

        public IEnumerable<string> Keys { get { yield return SagePayEnrolledResponseKey; } }
    }
    public interface ITransactionRegistrar
    {
        /// <summary>
        /// Sends a transaction registration to SagePay and receives a TransactionRegistrationResponse
        /// </summary>
        TransactionRegistrationResponse Send(string vendorTxCode, ShoppingBasket basket,
                                             Address billingAddress, Address deliveryAddress, string customerEmail,
                                             PaymentFormProfile paymentFormProfile = PaymentFormProfile.Normal,
                                             string currencyCode = "GBP");
    }
    public enum PaymentFormProfile
    {
        Low,
        Normal
    }	/// <summary>
    /// Response received from a transaction registration
    /// </summary>
    public class TransactionRegistrationResponse
    {
        /// <summary>
        /// Protocol version
        /// </summary>
        public string VPSProtocol { get; set; }

        /// <summary>
        /// Status
        /// </summary>
        public ResponseType Status { get; set; }

        /// <summary>
        /// Additional status details
        /// </summary>
        public string StatusDetail { get; set; }

        /// <summary>
        /// Transaction ID generated by SagePay
        /// </summary>
        public string VPSTxId { get; set; }

        /// <summary>
        /// Security Key
        /// </summary>
        public string SecurityKey { get; set; }

        /// <summary>
        /// Redirect URL
        /// </summary>
        public string NextURL { get; set; }
    }
}