@using MrCMS.Helpers
@using MrCMS.Web.Apps.Ecommerce.Entities.Products
@using MrCMS.Web.Apps.Ecommerce.Helpers
@using MrCMS.Web.Apps.Ecommerce.Models
@using MrCMS.Web.Apps.Ecommerce.Settings
@model MrCMS.Web.Apps.Ecommerce.Entities.Products.ProductVariant
@{
    var product = Model.Product;
    var backInStock = ViewData["back-in-stock"] is bool && (bool)ViewData["back-in-stock"];
    var cart = ViewData["cart"] as CartModel;
    var canBuy = Model.CanBuy(cart, 1);
}
<div class="row-fluid" id="variant-details">
    <div class="span8">
        <div class="row-fluid">
            <div class="span4">
                @{ Html.RenderPartial("ProductImages", Model); }
            </div>
            <div class="span8">
                <h1>@Model.Product.Name</h1>

                <div class="product-price">
                    @Model.Price.ToCurrencyFormat()
                </div>
                @if (Model.ShowPreviousPrice)
                {
                    <span>
                        @(SiteSettings<EcommerceSettings>().PreviousPriceText) <span style="text-decoration: line-through">@Model.PreviousPrice.Value.ToCurrencyFormat()</span>
                    </span>
                }
                @Editable(product, p => p.Abstract, true)

                <div class="social-links">
                    @{Html.RenderPartial("SocialLinks");}
                </div>

                @RenderZone("Below Product Price")
            </div>
        </div>
    </div>
    <div class="span4">
        @if (!Model.SoldOut)
        {
            if (product.IsMultiVariant)
            {
            <div class="product-variants-filter">
                <label class="span3 line-height-30">Variants</label>
                @Html.DropDownList("variant", product.GetVariantOptions(Model), new { @class = "span9" })
            </div>
            }

            { Html.RenderPartial("ProductPricebreaks", Model); }

            if (canBuy.OK)
            {
                Html.RenderAction("AddToCart", "Cart", new { model = new AddToCartModel { ProductVariant = Model, Quantity = 1 } });
            }
            else if (canBuy is OutOfStock)
            {
            <div class="row-fluid out-of-stock">
                <p class="red text-center">
                    Sorry, this item is out of stock.
                </p>
                @if (backInStock)
                {
                    <p class="padding-left-5 padding-right-5">Thank you, you will be notified when this product is back in stock.</p>
                }
                else
                {
                    using (Html.BeginForm("BackInStock", "Product", FormMethod.Post))
                    {
                    @Html.Hidden("ProductVariant.Id", Model.Id)
                    <div class="row-fluid">
                        <div class="span5 padding-left-5">
                            @Html.TextBox("Email", "", new { placeholder = "Email address", @class = "span12", data_val = "true", data_val_required = "The field Your email is required" })
                        </div>
                        <div class="span7 padding-right-5">
                            <input type="submit" class="btn btn-info span12" value="Email me when back in stock" />
                        </div>
                    </div>
                    }
                }
            </div>
            }
            else if (canBuy is CannotOrderQuantity)
            {
            <div class="row-fluid out-of-stock">
                <p class="text-center">
                    You currently have all all available stock in your cart
                </p>
            </div>
            }
            else if (canBuy is NoShippingMethodWouldBeAvailable)
            {
            <div class="row-fluid out-of-stock">
                <p class="text-center">
                    @canBuy.Message
                </p>
            </div>
            }
        }
        else
        {
            @Model.SoldOutMessage
        }

        @RenderZone("Below Add to cart")
    </div>
</div>
