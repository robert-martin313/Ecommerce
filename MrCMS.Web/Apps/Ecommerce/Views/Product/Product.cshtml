@model MrCMS.Web.Apps.Ecommerce.Pages.Product
@using MrCMS.Helpers
@using System.Linq
@using MrCMS.Web.Apps.Ecommerce.Entities.Products
@using MrCMS.Web.Apps.Ecommerce.Helpers
@using MrCMS.Web.Apps.Ecommerce.Models
@{
    var selectedVariant = ViewData["selected-variant"] as ProductVariant ?? Model.VariantsByPrice.First();
    var backInStock = ViewData["back-in-stock"] is bool && (bool)ViewData["back-in-stock"];
    var hasSpecifications = Model.SpecificationValues.Any();
}
@Html.HiddenFor(x => x.UrlSegment)
<div class="row-fluid">
    <div class="span8">
        <div class="row-fluid">
            <div class="span4">
                @{ Html.RenderPartial("ProductImages", Model); }
            </div>
            <div class="span8">
                <h1>@selectedVariant.Name</h1>

                <div class="product-price">
                    @selectedVariant.Price.ToCurrencyFormat()
                </div>
                @if (selectedVariant.ShowPreviousPrice)
                {
                    <span>
                        @Model.PreviousPriceText <span style="text-decoration: line-through">@selectedVariant.PreviousPrice.Value.ToCurrencyFormat()</span>
                    </span>
                }
                @Editable(Model, product => product.Abstract, true)

                <div class="social-links">
                    @{Html.RenderPartial("SocialLinks");}
                </div>

                @RenderZone("Below Product Price")
            </div>
        </div>
    </div>
    <div class="span4">
        @if (Model.IsMultiVariant)
        {
            <div class="product-variants-filter">
                <label class="span3 line-height-30">Variants</label>
                @Html.DropDownList("variant", Model.VariantsByPrice.BuildSelectItemList(variant => variant.SelectOptionName, variant => variant.Id.ToString(), variant => variant == selectedVariant, emptyItem: null), new { @class = "span9" })
            </div>
        }

        @{Html.RenderPartial("ProductPricebreaks", Model);}

        @if (selectedVariant.TrackingPolicy == TrackingPolicy.Track && selectedVariant.StockRemaining <= 0)
        {
            <div class="row-fluid out-of-stock">
                <p class="red text-center">
                    Sorry, this item is out of stock.
                </p>
                @if (backInStock)
                {
                    <p class="padding-left-5 padding-right-5">Thank you, you will be notified when this product is back in stock.</p>
                }
                else
                {
                    using (Html.BeginForm("BackInStock", "Product", FormMethod.Post))
                     {
                         @Html.Hidden("ProductVariant.Id", selectedVariant.Id)
                         <div class="row-fluid">
                             <div class="span5 padding-left-5">
                                 @Html.TextBox("Email", "", new {placeholder = "Email address", @class = "span12", data_val = "true", data_val_required = "The field Your email is required"})
                             </div>
                             <div class="span7 padding-right-5">
                                 <input type="submit" class="btn btn-info span12" value="Email me when back in stock" />
                             </div>
                         </div>
                     }
                }
            </div>
        }
        else
        {
            using (Html.BeginForm("AddToCart", "Cart", FormMethod.Post))
            {
            @Html.Hidden("Id", selectedVariant.Id)
            <div id="product-addtobasket">
                <label class="span3 line-height-30">Quantity&nbsp;</label>
                <input type="text" class="input-mini" value="1" id="quantity" name="quantity" />
                <button class="btn btn-info btn-addtobasket pull-right span6" type="submit">Add to basket</button>
            </div>
            }
        }

        @RenderZone("Below Add to cart")
    </div>
</div>

<hr class="small-margin" />

<div class="row-fluid" id="product-description-container">
    <div class="@(hasSpecifications ? "span8" : "span12")">
        <h4>Description</h4>
        @Editable(Model, product => product.BodyContent)
    </div>
    @if (hasSpecifications)
    {
        Html.RenderPartial("ProductSpecifications", Model);
    }
</div>
@RenderZone("Below Product Information")
@{ Html.IncludeScript("~/Apps/Ecommerce/Content/Scripts/custom/product.js"); }