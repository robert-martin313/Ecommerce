@using System.Drawing
@using System.Linq
@using MrCMS.Web.Apps.Ecommerce.Entities.Products
@using MrCMS.Web.Apps.Ecommerce.Helpers
@using MrCMS.Web.Apps.Ecommerce.Models
@using MrCMS.Web.Apps.Ecommerce.Models.StockAvailability
@using MrCMS.Web.Apps.Ecommerce.Pages
@using MrCMS.Web.Apps.Ecommerce.Settings
@using MrCMS.Website
@model MrCMS.Web.Apps.Ecommerce.Entities.Products.ProductVariant
@{
    Product product = Model.Product;
    CanBuyStatus canBuy = ViewData["can-buy-status"] as CanBuyStatus ?? new CannotOrderQuantity(Model, 0);
    var mainCategory = product.Categories.OrderBy(x => x.DisplayOrder).FirstOrDefault();
}

<div class="margin-bottom-30 grey-border-top" id="variant-details">
    <div class="container">
        <div class="margin-top-bottom-30">
            <div class="row">
                <div class="col-sm-12">
                    <h1 itemprop="name">@Model.Product.Name</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-7">
                    @{ Html.RenderPartial("ProductImages", Model); }
                </div>
                <div class="col-sm-5">
                    <div class="price margin-bottom-10">
                        <span itemprop="offerDetails" itemscope itemtype="http://data-vocabulary.org/Offer">
                            <meta itemprop="priceCurrency" content="@(MrCMSApplication.Get<EcommerceSettings>().CurrencyCode())" />
                            <span itemprop="price">@Model.Price.ToCurrencyFormat()</span>
                            @if (canBuy.OK)
                            {
                                <span class="instock" itemprop="availability" content="in_stock">@Resource("In stock")</span>
                            }
                            @if (Model.ShowPreviousPrice)
                            {
                                <span class="previous-price">
                                    <span class="inner">@Model.PreviousPrice.Value.ToCurrencyFormat()</span>
                                </span>
                            }
                        </span>
                    </div>

                    @if (!Model.SoldOut)
                    {
                        if (product.IsMultiVariant)
                        {
                            <div class="margin-bottom-10">
                                <div class="col-sm-3 col-xs-4 padding-left-0">
                                    <label class="line-height-30">Options :</label>
                                </div>
                                <div class="col-sm-9 col-xs-8 padding-right-0">
                                    @Html.DropDownList("variant", product.GetVariantOptions(Model), new { @class = "form-control" })
                                </div>
                                <div class="clearfix"></div>
                            </div>
                        }

                        if (canBuy.OK)
                        {
                            Html.RenderAction("Add", "AddToCart", new { model = new AddToCartModel { ProductVariant = Model, Quantity = 1 } });
                        }
                        if (canBuy is OutOfStock)
                        {
                            <span itemprop="availability" content="out_of_stock">Out of stock</span> <br />
                            Html.RenderAction("BackInStockForm", "Product", new { id = Model.Id });
                        }
                        if (canBuy is CannotOrderQuantity)
                        {
                            <p class="text-center">
                                You currently have all available stock in your cart
                            </p>
                        }
                        if (canBuy is NoShippingMethodWouldBeAvailable)
                        {
                            <p class="text-center">
                                @canBuy.Message
                            </p>
                        }
                        if (!string.IsNullOrWhiteSpace(Model.SKU))
                        {
                            @:SKU: <span itemprop="identifier" content="sku:@Model.SKU">@Model.SKU</span><br />
                        }
                        if (product.Brand != null)
                        {
                            if (!string.IsNullOrWhiteSpace(product.Brand.Logo))
                            {
                                <div>
                                    @RenderImage(product.Brand.Logo, new Size { Width = 120 }, product.Brand.Name, product.Brand.Name, new { @class = "img-responsive" })
                                </div>
                                <br />
                            }
                            else
                            {
                                @:Brand: <span itemprop="brand">@product.Brand.Name</span><br />
                            }
                        }
                        if (mainCategory != null)
                        {
                            @:Category: <span itemprop="category" content="@mainCategory.NestedName"><a href="/@mainCategory.UrlSegment">@mainCategory.Name</a></span><br />
                        }

                        Html.RenderAction("Add", "Wishlist", new { productVariant = Model });

                        Html.RenderPartial("ProductPricebreaks", Model);
                    }
                    else
                    {
                        @Html.Raw(Model.SoldOutMessage)
                    }

                    @if (!string.IsNullOrWhiteSpace(product.ProductAbstract))
                    {
                        <div class="padding-bottom-10" itemprop="description">
                            @Editable(product, p => p.ProductAbstract, true)
                        </div>
                    }


                    @if (!string.IsNullOrWhiteSpace(Model.Product.BodyContent))
                    {
                        <div class="padding-bottom-10" id="readFullDescription">
                            <p class="hidden-xs">
                                <a href="#fulldescription" title="Read full description">Read full description</a>
                            </p>
                        </div>
                    }
                    @{ Html.RenderPartial("SocialLinks"); }


                    @{RenderZone("Below Product Price");}
                </div>
            </div>
        </div>
    </div>
</div>
@{ RenderZone("Below Add to cart"); }