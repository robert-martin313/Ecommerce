@using System.ComponentModel
@using System.Diagnostics
@using System.Diagnostics.CodeAnalysis
@using System.Drawing
@using System.Globalization
@using System.Linq.Expressions
@using System.Reflection
@using System.Text
@using System.Text.RegularExpressions
@using MrCMS.Apps
@using MrCMS.Entities.Multisite
@using MrCMS.Entities.People
@using MrCMS.Helpers
@using MrCMS.Services
@using MrCMS.Shortcodes
@using MrCMS.Website
@using MrCMS.Website.Optimization
@using Newtonsoft.Json
@model User
@{
    ViewBag.Title = "Edit | " + Model.Name;
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    var onlyAdmin = Convert.ToBoolean(ViewData["OnlyAdmin"]);
    var userRoles = ViewData["AvailableRoles"] as IEnumerable<UserRole>;
    
}

@using (Html.BeginForm("Edit", "User", FormMethod.Post, new { id = "edit-user" }))
{
    <fieldset>
        <legend>@Model.Name

            <span class="btn-group  display-inline  pull-right">
                @Html.ActionLink("Back to list", "Index", "User", null, new { @class = "btn" })
                <a href="@Url.Action("SetPassword", "User", new { id = Model.Id })" type="button" class="btn" data-toggle="fb-modal">Reset Password</a>

                @if (!onlyAdmin)
                {
                    <a href="@Url.Action("Delete", "User", new { id = Model.Id })" class="btn btn-danger" data-toggle="fb-modal">Delete</a>
                }
                <button class="btn btn-primary">
                    Save</button>
            </span>
        </legend>

        @Html.HiddenFor(x => x.Id)
        <div id="tabs">
            <ul class="nav nav-tabs">
                <li class="active"><a href="#properties" data-toggle="tab">Properties</a></li>
                <li><a href="#roles" data-toggle="tab">Roles</a></li>
            </ul>
            <div class="tab-content">
                <div id="properties" class="tab-pane active">
                    @Html.LabelFor(x => x.Email)
                    @Html.TextBoxFor(x => x.Email, new { @class = "span12" })
                    @Html.LabelFor(x => x.FirstName)
                    @Html.TextBoxFor(x => x.FirstName, new { @class = "span12" })
                    @Html.LabelFor(x => x.LastName)
                    @Html.TextBoxFor(x => x.LastName, new { @class = "span12" })
                    @if (!onlyAdmin)
                    {
                        <div class="form-inline">
                            @Html.InlineCheckboxFor(x => x.IsActive, new { }, new { }, "Is Active")
                        </div>
                    }
                    <hr />
                </div>
                <div id="roles" class="tab-pane">
                    <div class="form-inline">
                        @if (userRoles != null)
                        {
                            foreach (var role in userRoles)
                            {
                                bool isChecked = Model.Roles.Any(x => x.Id == role.Id);
                                bool isEnabled = !role.IsAdmin || !onlyAdmin;

                            @Html.CheckBox("Role-" + role.Id, isChecked, isEnabled ? null : new { disabled = "disabled" })
                            @:&nbsp;
                            @Html.Label("Role-" + role.Id, role.Name)
                            <br />
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

    </fieldset>
}