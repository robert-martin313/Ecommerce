@using MrCMS.Entities.Documents.Web
@using MrCMS.Helpers
@using MrCMS.Paging
@model MrCMS.Web.Areas.Admin.Models.Search.AdminWebpageSearchQuery
@{
    var results = ViewData["results"] as IPagedList<Webpage>;
}
<div class="row-fluid">
    @using (Html.BeginForm("Index", "Search", FormMethod.Get))
    {
        <fieldset>
            <legend>Webpage Search @(!string.IsNullOrWhiteSpace(Model.Term) ? " - " + Model.Term : "")
                <span class="btn-group  display-inline  pull-right">
                    <input type="submit" value="Search" class="btn btn-primary" />

                </span>
            </legend>
            <div class="row-fluid">
                <div class="span6">
                    @Html.LabelFor(x => x.Term)
                    @Html.TextBoxFor(x => x.Term, new { @class = "span12" })
                    @Html.ValidationMessageFor(x => x.Term)
                </div>
                <div class="span6">

                    @Html.LabelFor(x => x.CreatedOnFrom)
                    @Html.TextBoxFor(x => x.CreatedOnFrom, new { @class = "date-time-picker" })
                    @Html.ValidationMessageFor(x => x.CreatedOnFrom)
                </div>
            </div>
            <div class="row-fluid">
                <div class="span6">
                    <div class="row-fluid">
                        <div class="span6">
                            @Html.LabelFor(x => x.Parent.Id, "Parent")
                            @Html.DropDownListFor(x => x.Parent.Id, ViewData["parents"] as IEnumerable<SelectListItem>, new { @class = "span12" })
                            @Html.ValidationMessageFor(x => x.Parent.Id)
                        </div>
                        <div class="span6">
                            @Html.LabelFor(x => x.Type)
                            @Html.DropDownListFor(x => x.Type, ViewData["doc-types"] as IEnumerable<SelectListItem>, new { @class = "span12" })
                            @Html.ValidationMessageFor(x => x.Type)
                        </div>
                    </div>

                </div>
                <div class="span6">
                    @Html.LabelFor(x => x.CreatedOnTo)
                    @Html.TextBoxFor(x => x.CreatedOnTo, new { @class = "date-time-picker" })
                    @Html.ValidationMessageFor(x => x.CreatedOnTo)
                </div>

            </div>
            @Html.ValidationSummary()

        </fieldset>


    }
</div>
@if (Model.Parent != null)
{
    Html.RenderAction("GetBreadCrumb", "Search", new { parentId = Convert.ToInt32(ViewData["parent-val"]) });
}
<div id="search-results">
    @if (results == null || !results.Any())
    {
        <p>No documents could be found matching your search term</p>
    }
    else
    {
        
        foreach (var result in results)
        {
        <div class="row-fluid">
            <div class="span6">
                <a href="@Url.Action("Edit", "Webpage", new { id = result.Id })" class="">
                    <strong>@result.Name</strong>
                </a>
                <br />
                @if (result.Parent != null)
                {
                    @:Parent: @result.Parent.Name
                 }
                <p>Last updated on @result.UpdatedOn</p>
            </div>
            <div class="span2">
                @result.DocumentType
            </div>
            <div class="span4">
                <div class="btn-group display-inline">
                    @Html.ActionLink("Edit", "Edit", "Webpage", new { id = result.Id }, new { @class = "btn btn-mini" })

                    @if (result.Children.Any())
                    {
                        <a href="/Admin/Search?parent.id=@result.Id" class="btn btn-mini">View Children</a>
                    }
                </div>
            </div>
        </div>
        }
        @Html.Pager(results, "Index", page => new { page })
    }
</div>
