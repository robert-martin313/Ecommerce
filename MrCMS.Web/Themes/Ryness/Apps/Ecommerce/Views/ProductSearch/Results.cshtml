﻿@model MrCMS.Paging.IPagedList<MrCMS.Web.Apps.Ecommerce.Pages.Product>
@using MrCMS.Helpers
@using MrCMS.Web.Apps.Ecommerce.Services.Products
@using MrCMS.Web.Apps.Ecommerce.Helpers
@{
    var query = ViewData["query"] as ProductSearchQuery;
}
<div id="loading-message" style="display: none;position: fixed;top: 50%;left: 50%;"><img src="/Themes/Ryness/Content/Images/ajax-loader.gif" /></div>
<div id="product-results-container">
    <div id="products-operations" class="row-fluid padding-top-bottom-10 border-top">
        <div id="stats" class="span4">
            @if (Model.Any())
            {
                <text>
                    Showing @(Model.PageSize > 1 ? Model.FirstItemOnPage + " - " + Model.LastItemOnPage : Model.PageNumber.ToString()) of @Model.TotalItemCount
                </text>
            }
        </div>
        <div id="sorting" class="span4 text-align-right">
            <div class="row-fluid mobile-sort">
                <div class="span3 line-height-30">
                    Sort by
                </div>
                <div class="span9">
                    <div class="row-fluid">
                        @Html.DropDownList("SortBy", query.SortByOptions, new { @class = "span12"})
                    </div>
                </div>
            </div>
        </div>
        <div id="show" class="span4 text-align-right">
            <div class="row-fluid mobile-sort">
                <div class="span3 line-height-30">
                    Show
                </div>
                <div class="span9">
                    <div class="row-fluid">
                        @Html.DropDownList("PageSize", query.PerPageOptions, new { @class = "span12"})
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="products-wrapper">
        @if (Model.Any())
        {
            <div id="products" class="span12 border-each padding-left-right-20 mobile-product-lists">
                @foreach (var product in Model)
                {
                    <div class="row-fluid list-items border-bottom">
                        @{ Html.RenderPartial("ProductCard", product); }
                    </div>
                }
                <div class="row-fluid">
                    <div class="span12">
                        <div class="pagination pagination-large">
                            @Html.PageCurrentPage(Model, i => new { page = i }, PagedListRenderOptions.OnlyShowFivePagesAtATime)
                        </div>
                    </div>
                </div>
            </div>  
        }
        else
        {
            <text>No products to display, please refine your search.</text>
        }
    </div>

</div>